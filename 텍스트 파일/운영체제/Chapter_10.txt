1.Demand Paging

    1. 필요할 때만 페이지를 메모리로 가져옴

        1. Less I/O needed, no unnecessarty I/O

        2. Less memory needed

        3. Faster response & more users

    2. Similar to paging system with swapping

        1. diagram on right
    
    3. Page is needed -> reference to it

        1. Invalid reference -> abort (중단)

        2. Not - in - memory -> bring to memory

2. Valid - invalid Bit

    1. With each page table entry, a valid - invalid bit is associated

        1. v -> in - memory - memory resident

        2. i -> not - in - memory
    
    2. initially valid - invalid bit is set to i on all entries

    3. During MMU address translation

        1. if valid - invalid bit in page table entry : page fault

3. Free - Frame List

    1. Page fault가 발생 -> OS : secondary storage 0-> page -> main memory

    2. Most operating systems maintain a free-frame list

        1. a pool of free frames for satisfying such requests.
    
    3. Operating system typically allocate free frames using a technique known

        1. Zero - fill - on - demand : the content of the frames zeroed-out (erased)

        2. before being allocated
    
    4. When a system starts up, all available memory is placed on the free-frame list


4. Copy - on - Write

    1. Copy - on - Write (COW) allows both parent and child processes to initially share the same pages in memory

        1. Only then is the page copied if either process modifies a shared page.

    2. COW allows more efficient process creation as only modified pages are copied

    3. In general, free pages are allocated from a pool of zero-fill-on-demand pages

        1. Pool should always have free frames for fast demand page execution

            1. Don't want to have to perform further processing on a page fault, such as freeing a frame

    4. vfork() variation on fork() system call has parent suspend and child using that.

        1. copy - on - write address space of parent

            1. Designed to have child call exec()

            2. Very efficient

5. First - In - First - Out (FIFO) Algorithm

    1. Reference string: 1,2,3,4,1,2,5,1,2,3,4,5

    2. 3 frames (3 pages can be in memory at a time per process)

        [1, NULL, NULL]
        [1, 2, NULL]
        [1, 2, 3]
        [4, 2, 3] -> 맨 앞자리 수 바뀜
        [4, 1, 3] -> 두 번째 자리 수 바뀜
        [4, 1, 2] -> 세 번째 자리 수 바뀜
        [5, 1, 2] -> 다시 맨 앞자리 수 바뀜
         X [5, 1, 2] -> 배열 안에 같은 수가 있어서 패스됨
         X [5, 1, 2] -> 배열 안에 같은 수가 있어서 패스됨
        [5, 3, 2]
        [5, 3, 4]

6. Optimal Algorithm

    1. Replace page that will not be used for longest period

        1. 9 is optimal for the example

    2. How do you know this?

        1. Can't read the future
    
    3. 알고리즘이 얼마나 잘 수행되는지 측정

    4. Reference string: 7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1

    5. 3 frames (same)

        [7, NULL, NULL]
        [7, 0, NULL]
        [7,0,1]
        [2,0,1]
        X [2,0,1] -> 같은 수가 있어서 생략 (0)
        [2,0,3]
        X [2,0,3] -> 같은 수가 있어서 생략 (0)
        [2,4,3]
        X [2,4,3] -> 같은 수가 있어서 생략 (4)
        X [2,4,3] -> 같은 수가 있어서 생략 (2)
        X [2,4,3] -> 같은 수가 있어서 생략 (3)
        [2,0,3]
        X [2,0,3] -> 같은 수가 있어서 생략 (0)
        X [2,0,3] -> 같은 수가 있어서 생략 (3)
        x [2,0,3] -> 같은 수가 있어서 생략 (2)
        [2,0,1]
        x [2,0,1] -> 같은 수가 있어서 생략 (2)
        x [2,0,1] -> 같은 수가 있어서 생략 (0)
        x [2,0,1] -> 같은 수가 있어서 생략 (1)
        [7,0,1]
        x [7,0,1] -> 같은 수가 있어서 생략 (0)
        x [7,0,1] -> 같은 수가 있어서 생략 (1)

7. Least Recently Used (LRU) Algorithm

    1. Use past knowledge rather than future

    2. Replace page that has not been used in the most amount of time

    3. Associate time of last use with each page

    4. Reference string: 7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1

    5. 3 frames (same)

        [7, NULL, NULL]
        [7, 0, NULL]
        [7,0,1]
        [2,0,1]
        x [2,0,1] -> 같은 수가 있어서 생략 (0)
        [2,0,3]
        x [2,0,3] -> 같은 수가 있어서 생략 (0)
        [4,0,3]
        [4,0,2]
        [4,3,2]
        [0,3,2]
        x [0,3,2] -> 같은 수가 있어서 생략 (3)
        x [0,3,2] -> 같은 수가 있어서 생략 (2)
        [1,3,2]
        x [1,3,2] -> 같은 수가 있어서 생략 (2)
        [1,0,2]
        x [1,0,2] -> 같은 수가 있어서 생략 (1)
        [1,0,7]
        x [1,0,7] -> 같은 수가 있어서 생략 (0)
        x [1,0,7] -> 같은 수가 있어서 생략 (1)

    6. 12 faults - better than FIFO, but worse than Opt

    7. Generally good algorithm and frequently used

    8. But how to implement

8. Enhanced Second - Chance Algorithm

    1. Improve algorithm by using reference bit and modify bit in concert
        
        1. if available
    
    2. Take ordered pair (refernece, modify):

        1. 낮은 등급 : (0,0)
            
            1. 최근에 사용하지 않음

            2. 수정하지 않음

            3. 교체하기 가장 좋은 페이지
        
        2. (0,1)

            1. not recently used but modified

            2. not quite as good

            3. must write out before Replacement

        3. (1,0) 
            
            1. recently used but clean

            2. probably will be used again soon
        
        4. 높은 등급 : (1,1)

            1. recently used and modified

            2. probably will be used again soon

            3. need to write out before Replacement
    
    3. When page replacement called for, use the clock scheme (second chance)

        1. But use the four classes to replace page in lowest non-empty class

            1. Might need to search circular queue several times

9. Fixed Allocation
    
    1. Equal allocation (균등 할당)

        1. For example -> if there are 100 frames and 5 processes, give each process 20 frames

            1. (after allocating frames for the OS)

            2. Keep some as free frame buffer pool
        
    2. Proportional allocation (비례 할당)

        1. Allocate according to the size of process

            1. Dynamic as degree of multiprogramming, process sizes change

                S_i = size of process p_i

                S = (sum) S_i

                m = total number of frames

                a_i = allocation for p_i = s_i / s * main

10. Global Vs Local Allocation

    1. Global replacement

        1. process selects a replacement frame from the set of all frames

            1. one process can take a frame from another

                1. But then process execution time can vary greatly

                2. But greater throughput (처리량) so more common
        
        2. Local replacement

            1. each process selects from only its own set of allocated frames
                
                1. More consistent per - process performance

                2. But possibly underutilized memory
