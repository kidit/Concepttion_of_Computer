1. 전송 제어

    1. 특징

        1. 프레임이라는 블록 -> 전송된 데이터의 동기화 문제 발생

        2. 여러 가지 회선 구성 방식 + 통신 방식 -> 다양한 요구 사항 변함

            1. 회선 구성 방식 : 점대점, 다중점

            2. 통신 방식 : 단방향, 반이중, 전이중

        3. 송수신기 사이의 처리 속도에 따라 흐름 제어가 필요함

        4. 물리적 장치 간에 오류 발생 -> 오류 제어 필요
        
        5. 다중점 통신 -> 전송 대상 식별 : 주소 지정 필요

        6. 데이터 송수신 개시, 유지, 해제 -> 장치 간 링크 관리 필요함

    2. 데이터 전송 제어 절차

        1. 회선 연결

            1. 교환 회선 
            
                1. 통신 회선 , 단말 장치 -> 물리적으로 연결

                2. 다이얼, 수신 측 주소 전송 -> 데이터 전송 가능하도록 연결하는 단계

            2. 데이터링크 확립(설정)

                1. 접속된 통신 회선망 -> 송신 측, 수신 측 간 확실한 데이터 전송 수행 -> 논리적 경로 구성

                2. 회선 제어 방식에 해당

                3. 경쟁 방식, 폴-셀렉션 방식이 있음

                    1. 경쟁 방식

                        1. 먼저 송신을 요구한 자치 -> 데이터 전송 권한 얻음

                        2. 점대점 회선에서 이 방식 사용

                            1. 다중점 네트워크 -> 2개 이상의 장치 : 동시 송신 요구 시 충돌 발생 -> 사용 X

                            3. 데이터 전송이 종료되기 전까지 링크 독점 사용
                        
                        3. 회선 제어 : 링크 설정 -> 데이터 전송 -> 링크 해제

                        장점 : 간단함 + 전파 지연시간이 긴 경우에 유리함

                        단점 : 트래픽이 높은 네트워크 : 비효율
                    
                    2. 폴 - 셀렉션 방식

                        1. 다중점 회선 제어에서 사용하는 방식

                        2. 링크 1개 : 주장치 1개 + 종장치 여러 개 구성

                            1. 주장치 
                                
                                1. 링크 제어

                                2. 세션 시작

                                3. 특정 시간 동안 -> 어떤 장치가 채널을 사용할 지 결정

                            2. 종장치 : 주장치의 명령을 따름
                        
                            3. 종장치 간의 데이터 전송 -> 주장치를 통해 수행

                            4. 다중점 구성 : 주장치 -> 특정 종장치와 연결 시 주소 필요

                                1. 주장치 -> 주소 전송 -> 주소 : 수신 종장치 -> 전송 -> 주소 : 발신 종장치
                        
                        3. 폴 
                        
                            1. 보낼 데이터가 없는 종장치 : NAK로 보냄

                            2. 보낼 데이터가 있는 종장치 : 데이터 보냄

                                1. roll-call polling : 주장치가 모든 종장치에 차례대로 폴링함

                                2. hub go-head polling 
                                
                                    1. 회선에 연결된 마지막 종장치 -> 주국으로 폴을 돌려줌 

                                    2. 다시 새로운 폴링 사이클이 시작됨
                        
                        4. 셀렉션

                            1. 주장치 -> 종장치에 보낼 데이터가 있을 때 사용

                            2. 데이터를 보내기 전 데이터를 수신할 종장치에 데이터 수신 준비를 시킴

                        장점 
                        
                            1. 하나의 회선 -> 여러 개의 단말 장치가 공유함 -> 회선 비용 절감

                            2. 2개 이상 단말 장치 -> 동시에 데이터 전송 요구 X -> 충돌 발생 X
                        
                        단점

                            1. 폴링

                                1. 수행하는 동안 상당한 오버헤드가 소요됨

                                2. 단말 장치 -> 원하는 시간에 데이터를 전송할 수 없음

                                3. 오직 폴링을 받은 다음에만 전송 가능

            3. 데이터 전송

                1. 설정된 데이터링크 -> 데이터 : 수신 측 전송

                2. 잡음에 의해 발생하는 오류 검출, 정정 : 오류 제어 수헹

                3. 데이터 중복, 손실 방지 : 순서 제어 수행
            
            4. 데이터링크 해제

                1. 데이터 전송 종료 -> 수신 측 확인 -. 송수신 간 논리적 경로 : 데이터 링크 해제

            5. 회선 해제(절단)

                1. 교환 회선 : 통신 회선 - 단말 장치 간 물리적 연결 절단 단계

2. 흐름 제어

    1. 송신 장치와 수신 장치의 처리 속도가 다를 때 데이터 양, 통신 속도는 처리 능력을 초과하지 않도록 조절함

        1. 수신 장치가 저장 한계에 도달하기 전, 송신 장치 -> 제어 정보 보냄

            1. 송신 속도 늦추기

            2. 일시적인 중단 요구 -> 데이터 손실 방지
    
    2. 종류

        1. RTS / CTS

            1. 모뎀을 이용 -> 통신 시 보오율을 맞추는데 사용함

            2. 통신 없을 때 -> 충돌 방지 : 특정 핀을 사용 -> 상호 간 전송 예비 신호 보냄

            3. 하드웨어적 방법

        2. 정지 - 대기 방식
            
            특징

                1. 방법이 단순함

                    1. 구현 용이

                    2. 비용 최소화

                2. 한 번에 1개의 프레임만 전송

                3. 송신 측 : 하나의 프레임 전송 -> 수신 측으로부터 확인 응답 받음

                4. 수신 측 : 한 프레임을 수신할 정도의 버퍼 공간만 있으면 충분

                5. 송신 측이 기다리는 시간이 길어짐 -> 전송 효율이 낮음

        3. 슬라이딩 윈도 방식
            
            특징

                1. 확인 응답 없이 한 번에 윈도 크기만큼 프레임 전송 가능

                2. 여러 개의 프레임 전송 -> 전송 효율이 좋음

                3. 전송 지연이 큰 전송로에 적합함

3. 오류 제어

    평가 : 오류율로 결정

        오류율 = (오류가 발생한 요소 개수) / (총 전송된 요소의 개수)

            1. 요소 : 비트, 블록, 문자

    방식

        1. 오류 무시

        2. 반향 검사 방식 = 루프 검사 방식

            1. 송신 측에서 전송한 데이터 -> 수신 측 : 송신 측에 다시 보냄
            
            2. 송신 측: 되돌아온 데이터 + 전송 데이터 비교 -> 재전송 유무 판단

                1. 근거리 시스템에 주로 사용함

        3. 오류 검출 방식

            1. 오류 검출 부호 사용

                1. 송신 측에서 전송한 데이터 -> 오류 검출을 위한 특수 코드 추가 전송

                2. 수신 측 : 받은 데이터들을 검사 -> 오류 발생 여부 판단 (Redundancy)

                3. 오류 발생 여부 판단 이후 -> 리던던시 폐기

            종류

                1. 패리티 검사 : 한 블록의 데이터 끝에 한 비트 추가 = 1 비트 추가 시 리던던시는 1비트가 됨

                2. 블록 합 검사 : 이차원 패리티로 1비트 오류 발생 시 -> 오류 검출 + 위치 추적 + 정정 

                3. 순환 중복 검사 (CRC)

                    1. 데이터 전송 오류 검사 방식

                    2. 높은 신뢰도 확보 -> 오류 검출을 위한 오버헤드가 작음

                    3. 랜덤 오류, 버스트 오류를 포함한 오류 검출에 뛰어남

                    4. 2진 나누기 연산과 유사한 방법 -> 리던던시 계산

                4. 검사합 : 전송 데이터 -> 비트의 합계 값을 붙여 보내 오류를 검출하는 방식

                    1. 수신 측 : 전송된 데이터 -> 모두 더하고 1의 보수를 취해 줌
                        
                        1. 결과 0 : 오류 없음

                    2. 송신 측 : 수신 측과 비슷하며 결과 값에 대한 1의 보수를 취한 상태에서 데이터 끝에 붙여서 전송
                
                    3. TCP/IP -> 오류 검출을 위해 사용

                    4. 16비트 단위로 검사 합을 구함
                
                5. 오류 정정

                    1. 전진 오류 정정 = 순방향 오류 정정

                        1. 데이터 전송 과정에서 발생한 오류 검출 -> 재전송 요구 없이 스스로 수정하는 방식에

                        2. 재전송 요구 없음 -> 역 채널 필요 없이 연속적인 데이터 전송 가능

                        3. 데이터 비트 + 오류 검출 및 수정 비트 -> 추가 전송 : 전송 효율이 낮음

                    2. 자동 반복 요청

                        1. 수신 측 : 오류 검출 -> 송신 측 : 오류 발생 사실 알림 -> 해당 프레임 재전송 요청

                        2. 데이터링크 계층에서 가장 많이 사용함

                        3. 흐름 제어와 함께 실현됨

                        종류

                            1. 정지 - 대기 (Stop - and - Wait) ARQ

                                1. 한 번에 하나씩 프레임 전송
                                
                                2. 송신 측 -> 프레임 1개를 전송한 이후 수신 측으로부터 ACK, NAK를 기다리는 방식

                                    1. ACK 들어올 시 -> 다음 프레임 전송

                                    2. NAK or 정해진 시간 내 ACK가 안 들어올 시 -> 앞 프레임을 다시 전송함

                                    3. ACK를 받을 때 까지 해당 프레임을 버퍼에 보관하고 있어야 함

                                    4. 전송 효율이 낮지만 가장 간단한 방법

                                    5. 전송 프레임 손실 or 수신 측 전송 ACK 손실 

                                        1. 송신 측 : 항상 프레임 전송한 후 해당 프레임에 대한 ACK를 기다림 -> 타이머 동작

                                            1. 시간 초과 -> 전송한 프레임 손실 판단 -> 재전송
                                        
                                    6. 프레임을 구별하기 위해 순서 번호 사용 -> 0,1만 사용

                                특징

                                    1. 통신 회선의 품질이 좋은 경우에 많이 사용

                                    2. 프레임 크기 -> 다른 방식에 비해 큼

                            2. Go - back - N ARQ

                                1. 송신 측 -> 여러 개 프레임 -> 연속 전송함

                                2. 수신 측 -> NAK 올 때 -> 오류가 발생한 프레임으로 돌아감 -> 해당 프레임 이후의 프레임을 다시 전송함

                                3. 송신 측의 버퍼 크기는 최대 윈도 크기만큼 되어야 함
                            
                            3. 선택적 ARQ

                                1. 여러 개의 프레임 -> 연속으로 전송

                                2. 오류 발생 -> 해당 프레임만 재전송

                                3. 중복해서 보내는 프레임이 없음 -> 효율적

                                4. 수신 측 -> 데이터를 처리하기 전 -> 원래 순서대로 조립

                                    1. 제어 복잡

                                    2. 대용량의 버퍼 필요
                                
                                    3. Go - back - N ARQ에 비해 잘 사용하지 않음
                            
                            4. 적응적 ARQ

                                1. 채널의 효율을 높임 -> 고정된 크기의 프레임을 사용하지 않음

                                2. 전송로의 오류 발생률과 프레임 크기는 서로 반비례 관계임

                                3. 제어 회로 복잡함

                                4. 프레임 길이 변경에 따라 채널의 유휴 시간이 발생 -> 거의 사용하지 않음
                        
                        5. 해밍 코드

                            1. 한 데이터 블록 내 1개의 오류 발생할 경우 -> 정정할 수 있는 단일 오류 정정 코드

                            2. 블록 코드 : 블록 단위로 리던던시를 붙이는 방식

                            2. 콘볼루션 코드 : 여러 비트의 오류 정정 = 길쌈 부호

                            
